/**
 * Represents a single purchase module
 */

/**
 * Adds a new Purchase to Parse
 * 
 * @param req
 *            request from server
 */
var config = require('./config');
var Kaiseki = require('./kaiseki');
var crypto = require('crypto');
// instantiate
var kaiseki = new Kaiseki(config.APP_ID, config.REST_API_KEY);
var className = 'Restrictions';
exports.newRestriction = function(req) {
	var restriction = [ {
		'userId' : req.param('userId'),
		'restriction_type' : req.param('restriction_type'),
		'restriction_amount' : req.param('restriction_amount')
	} ]
	kaiseki.createObjects(className, restriction, function(err, res, body,
			success) {
		console.log('restriction created = ', body);
	});
};
exports.getRestrictionByUser = function(req) {
	var params = {
		where : {
			userId : req.param('userId')
		}
	};
	kaiseki.getObjects(className, params, function(err, res, body, success) {
	});
}
/**
 * Get User total restriction by type
 * 
 * @param req
 *            request from server
 * @param callback
 *            function
 */
exports.getUserRestrictionAmountByPurchaseType = function(req, successCallback, failCallback) {
	// query with parameterss
	var params = {
		where : {
			credit_hash : crypto.createHash("md5").update(
					req.param('credit_hash').toString()).digest("hex")
		},
	};
	kaiseki.getUsers(params, function(err, res, body, success) {
		if (body.length > 0) {
			params = {
				where : {
					userId : body[0].objectId,
					restriction_type : req.param('purchase_type')
				}
			};

			kaiseki.getObjects(className, params, function(err, res, body,success) {
				kaiseki.getObject('PurchaseTypes', body[0].restriction_purchase_type.objectId, params, function(err, res, _body, success) {
					successCallback(body[0].restriction_amount,_body.name)
				});
			});
		}else{
			failCallback();
		}
	});
}