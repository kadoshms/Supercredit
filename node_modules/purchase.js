/**
 * Represents a single purchase module
 */

/**
 * Adds a new Purchase to Parse
 * 
 * @param req
 *            request from server
 */
var config = require('./config');
var Kaiseki = require('./kaiseki');
var className = 'Purchases';
// instantiate
var kaiseki = new Kaiseki(config.APP_ID, config.REST_API_KEY);
var crypto = require('crypto');
/**
 * Creates a new Purchase after validation
 */
exports.newPurchase = function(req, callback) {
	var params = {
		where : {
			credit_hash : crypto.createHash("md5").update(
					req.param('credit_hash').toString()).digest("hex")
		},
	};
	kaiseki.getUsers(params, function(err, res, body, success) {
		var purchase = [ {
			'userId' : body[0].objectId,
			'purchase_type' : req.param('purchase_type'),
			'purchase_amount' : req.param('purchase_amount'),
			'status'		  : config.STATUS_PURCHASE_APPROVED,
		} ]
		kaiseki.createObjects(className, purchase,
				function(err, res, body, success) {
					if (err == null)
						callback()
					else
						console.log(err)
		});
	})
};
/**
 * Creates a new Purchase after validation
 */
exports.newPendingPurchase = function(req, callback) {
	var params = {
		where : {
			credit_hash : crypto.createHash("md5").update(
					req.param('credit_hash').toString()).digest("hex")
		},
	};
	kaiseki.getUsers(params, function(err, res, body, success) {
		var purchase = [ {
			'userId' : body[0].objectId,
			'purchase_type' : req.param('purchase_type'),
			'purchase_amount' : req.param('purchase_amount'),
			'status'		  : config.STATUS_PURCHASE_DENIED,
		} ]
		kaiseki.createObjects(className, purchase,
				function(err, res, body, success) {
					if (err == null)
						callback()
					else
						console.log(err)
		});
	})
};
/**
 * Retrives Purchases from Parse
 */
exports.getPurchasesTotalByType = function(req, callback) {
	var params = {
		where : {
			userId : req.param('userId'),
			purchase_type : req.param('purchase_type'),
			status : config.STATUS_PURCHASE_APPROVED
		}
	};
	var total = parseFloat(req.param('purchase_amount'));
	kaiseki.getObjects(className, params, function(err, res, body, success) {
		var i;
		for (i = 0; i < body.length; i++) {
			total += parseFloat(body[i].purchase_amount);
		}
		callback(total)
	});
}
/**
 * Updates a denied purchase to approved
 */
exports.updateDeniedPurchaseToApproved = function(req, callback) {
	kaiseki.updateObject(className, req.params.id, {
		status : config.STATUS_PURCHASE_APPROVED}, function(err, res, body, success) {
			callback()
	});
}